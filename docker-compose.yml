version: '3.8'
name: jetstream

services:
  # API Gateway Service
  api-gateway:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      target: development
      args:
        NODE_VERSION: '20.5.1'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=jetstream
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_PORT=5433
      - TIMESCALE_DB=jetstream_position
      - JWT_SECRET=${JWT_SECRET:-development_secret}
      - API_RATE_LIMIT=100
    ports:
      - "3000:3000"
    volumes:
      - ./src/backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - jetstream_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Web Application
  web:
    build:
      context: ./src/web
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:3000
        VITE_WS_URL: ws://localhost:3000
        VITE_MAPBOX_TOKEN: ${MAPBOX_TOKEN}
        VITE_AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}
        VITE_AZURE_TENANT_ID: ${AZURE_TENANT_ID}
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - jetstream_network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=jetstream
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jetstream_network
    restart: unless-stopped

  # TimescaleDB for Position Data
  timescaledb:
    image: timescale/timescaledb:2.11.0-pg15
    environment:
      - POSTGRES_DB=jetstream_position
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jetstream_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jetstream_network
    restart: unless-stopped

volumes:
  postgres_data:
    name: jetstream_postgres_data
  timescaledb_data:
    name: jetstream_timescaledb_data
  redis_data:
    name: jetstream_redis_data

networks:
  jetstream_network:
    driver: bridge
    name: jetstream_network
    internal: false
    attachable: true
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16