name: Web CD

on:
  workflow_run:
    workflows: ["Web CI"]
    types: [completed]
    branches: [main]

concurrency:
  group: web-cd-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '20.x'
  WORKING_DIRECTORY: 'src/web'
  AZURE_CONTAINER_REGISTRY: 'jetstreamacr.azurecr.io'
  DEPLOYMENT_NAMESPACE: 'jetstream'
  DEPLOYMENT_TIMEOUT: '5m'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Azure login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: ACR login with OIDC
        uses: docker/login-action@v2
        with:
          registry: ${{ env.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: true
          tags: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}/web:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}/web:latest
          cache-from: type=registry,ref=${{ env.AZURE_CONTAINER_REGISTRY }}/web:buildcache
          cache-to: type=registry,ref=${{ env.AZURE_CONTAINER_REGISTRY }}/web:buildcache,mode=max

      - name: Scan container image
        uses: azure/container-scan@v1
        with:
          image-name: ${{ env.AZURE_CONTAINER_REGISTRY }}/web:${{ github.sha }}
          severity-threshold: HIGH
          run-quality-checks: true

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.jetstream.flyusa.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME_STAGING }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

      - name: Deploy to staging
        run: |
          kubectl set image deployment/web-blue \
            web=${{ env.AZURE_CONTAINER_REGISTRY }}/web:${{ github.sha }} \
            -n ${{ env.DEPLOYMENT_NAMESPACE }}
          kubectl rollout status deployment/web-blue \
            -n ${{ env.DEPLOYMENT_NAMESPACE }} \
            --timeout=${{ env.DEPLOYMENT_TIMEOUT }}

      - name: Health check
        run: |
          HEALTH_URL="https://staging.jetstream.flyusa.com/health"
          for i in {1..30}; do
            if curl -s -f ${HEALTH_URL}; then
              exit 0
            fi
            sleep 10
          done
          exit 1

      - name: Switch traffic
        run: |
          kubectl patch service web \
            -n ${{ env.DEPLOYMENT_NAMESPACE }} \
            -p '{"spec":{"selector":{"deployment":"blue"}}}'

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://jetstream.flyusa.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME_PROD }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

      - name: Deploy to production
        run: |
          kubectl set image deployment/web-blue \
            web=${{ env.AZURE_CONTAINER_REGISTRY }}/web:${{ github.sha }} \
            -n ${{ env.DEPLOYMENT_NAMESPACE }}
          kubectl rollout status deployment/web-blue \
            -n ${{ env.DEPLOYMENT_NAMESPACE }} \
            --timeout=${{ env.DEPLOYMENT_TIMEOUT }}

      - name: Health check
        run: |
          HEALTH_URL="https://jetstream.flyusa.com/health"
          for i in {1..30}; do
            if curl -s -f ${HEALTH_URL}; then
              exit 0
            fi
            sleep 10
          done
          exit 1

      - name: Switch traffic
        run: |
          kubectl patch service web \
            -n ${{ env.DEPLOYMENT_NAMESPACE }} \
            -p '{"spec":{"selector":{"deployment":"blue"}}}'

      - name: Verify deployment
        run: |
          kubectl get deployment web-blue \
            -n ${{ env.DEPLOYMENT_NAMESPACE }} \
            -o jsonpath='{.status.availableReplicas}' | grep 3

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const message = `Production deployment ${context.job} ${context.status}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.name,
              issue_number: context.issue.number,
              body: message
            });