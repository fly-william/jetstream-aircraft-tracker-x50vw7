# Logstash configuration for JetStream platform
# Version: 7.17.x
# Dependencies:
# - logstash-input-beats: 7.17.x
# - logstash-filter-json: 7.17.x
# - logstash-filter-grok: 7.17.x
# - logstash-output-elasticsearch: 7.17.x

input {
  beats {
    port => 5044
    ssl => true
    ssl_certificate => "/etc/logstash/certs/logstash.crt"
    ssl_key => "/etc/logstash/certs/logstash.key"
    ssl_verify_mode => "force_peer"
    include_codec_tag => true
    client_inactivity_timeout => 60
  }
}

filter {
  # Parse JSON logs
  json {
    source => "message"
    target => "parsed_log"
    remove_field => ["message"]
    skip_on_invalid_json => true
    add_tag => ["_json_parse_failure"]
  }

  # Custom pattern matching for different service logs
  grok {
    patterns_dir => ["/etc/logstash/patterns"]
    match => {
      # API Gateway logs
      "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} \[API-GATEWAY\] \[%{DATA:correlation_id}\] \[%{DATA:request_id}\] %{WORD:http_method} %{URIPATHPARAM:uri} %{NUMBER:status_code} %{NUMBER:response_time}ms %{GREEDYDATA:message}"

      # Aircraft Tracking logs
      "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} \[TRACKING\] \[%{DATA:correlation_id}\] \[%{DATA:aircraft_id}\] %{DATA:event_type} %{GREEDYDATA:message}"

      # Trip Management logs
      "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} \[TRIP\] \[%{DATA:correlation_id}\] \[%{DATA:trip_id}\] %{DATA:operation} %{GREEDYDATA:message}"

      # Notification logs
      "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} \[NOTIFICATION\] \[%{DATA:correlation_id}\] \[%{DATA:notification_id}\] %{DATA:notification_type} %{GREEDYDATA:message}"
    }
    tag_on_failure => ["_grok_parse_failure"]
    overwrite => ["message"]
  }

  # Enrich logs with Kubernetes metadata
  mutate {
    add_field => {
      "environment" => "%{[kubernetes][namespace]}"
      "pod_name" => "%{[kubernetes][pod][name]}"
      "container_name" => "%{[kubernetes][container][name]}"
      "@version" => "1.0"
      "log_source" => "jetstream"
    }
  }

  # Convert numeric fields
  mutate {
    convert => {
      "response_time" => "integer"
      "status_code" => "integer"
    }
  }

  # Add timestamp for log correlation
  date {
    match => ["timestamp", "ISO8601"]
    target => "@timestamp"
    remove_field => ["timestamp"]
  }

  # Drop health check logs
  if [uri] =~ "^/health" {
    drop { }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch-master:9200"]
    user => "${ELASTICSEARCH_USERNAME}"
    password => "${ELASTICSEARCH_PASSWORD}"
    index => "jetstream-logs-%{+YYYY.MM.dd}"
    
    # Index Lifecycle Management
    ilm_enabled => true
    ilm_pattern => "jetstream-logs-{now/d}-000001"
    ilm_policy => "jetstream-policy"
    
    # Template configuration
    pipeline => "jetstream-pipeline"
    template_name => "jetstream-template"
    template_overwrite => true
    
    # Security settings
    ssl => true
    ssl_certificate_verification => true
    
    # Performance tuning
    retry_on_conflict => 5
    bulk_max_size => 5120
    timeout => "30s"
  }
}

# ILM Policy Configuration
template {
  name => "jetstream-policy"
  pattern => "jetstream-logs-*"
  settings => {
    "index.lifecycle.name" => "jetstream-policy"
    "index.lifecycle.rollover_alias" => "jetstream-logs"
    
    # Hot phase
    "index.hot.max_age" => "7d"
    "index.hot.max_size" => "50gb"
    "index.hot.rollover" => {
      "max_size" => "30gb"
      "max_age" => "1d"
      "max_docs" => 5000000
    }
    
    # Warm phase
    "index.warm.min_age" => "7d"
    "index.warm.actions" => {
      "shrink" => 1
      "forcemerge" => 1
      "allocate" => {
        "require" => {
          "data" => "warm"
        }
      }
    }
    
    # Cold phase
    "index.cold.min_age" => "30d"
    "index.cold.actions" => {
      "allocate" => {
        "require" => {
          "data" => "cold"
        }
      }
      "searchable_snapshot" => {
        "snapshot_repository" => "jetstream_backup"
      }
    }
    
    # Delete phase
    "index.delete.min_age" => "90d"
    "index.delete.actions" => {
      "delete" => {
        "delete_searchable_snapshot" => true
      }
    }
  }
}