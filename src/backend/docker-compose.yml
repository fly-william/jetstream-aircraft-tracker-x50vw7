version: '3.8'

services:
  # API Gateway Service
  api-gateway:
    build:
      context: .
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=debug
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - jetstream_network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Tracking Service
  tracking-service:
    build:
      context: .
      target: development
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=tracking
      - TIMESCALEDB_HOST=timescaledb
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      timescaledb:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - jetstream_network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Trip Service
  trip-service:
    build:
      context: .
      target: development
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=trip
      - POSTGRES_HOST=postgres
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - jetstream_network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Notification Service
  notification-service:
    build:
      context: .
      target: development
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=notification
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - jetstream_network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=jetstream
      - POSTGRES_PASSWORD=development_password
      - POSTGRES_DB=jetstream
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jetstream"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jetstream_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # TimescaleDB
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    environment:
      - POSTGRES_USER=jetstream
      - POSTGRES_PASSWORD=development_password
      - POSTGRES_DB=jetstream_timeseries
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jetstream"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jetstream_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7
    command: redis-server --appendonly yes --requirepass development_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jetstream_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # ZooKeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "2181:2181"
    networks:
      - jetstream_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    networks:
      - jetstream_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/postgres
      o: bind
  timescaledb_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/timescaledb
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/redis
      o: bind

networks:
  jetstream_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1